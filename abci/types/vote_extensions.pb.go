// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: evmos/abci/v1/vote_extensions.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EVMVoteExtension struct {
	// block height
	Height int64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	// EIP-1559 base fee of the
	BaseFee cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=base_fee,json=baseFee,proto3,customtype=cosmossdk.io/math.Int" json:"base_fee"`
	// gas used in the block
	BlockGasUsed uint64 `protobuf:"varint,3,opt,name=block_gas_used,json=blockGasUsed,proto3" json:"block_gas_used,omitempty"`
	// bloom represents the bloom filter bytes
	Bloom []byte `protobuf:"bytes,4,opt,name=bloom,proto3" json:"bloom,omitempty"`
	// hex address of the miner (validator/sequencer) of the block
	Miner string `protobuf:"bytes,5,opt,name=miner,proto3" json:"miner,omitempty"`
	// extra data provided by the miner of the block
	ExtraData []byte `protobuf:"bytes,6,opt,name=extraData,proto3" json:"extraData,omitempty"`
}

func (m *EVMVoteExtension) Reset()         { *m = EVMVoteExtension{} }
func (m *EVMVoteExtension) String() string { return proto.CompactTextString(m) }
func (*EVMVoteExtension) ProtoMessage()    {}
func (*EVMVoteExtension) Descriptor() ([]byte, []int) {
	return fileDescriptor_b230fc52e5675037, []int{0}
}
func (m *EVMVoteExtension) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EVMVoteExtension) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EVMVoteExtension.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EVMVoteExtension) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EVMVoteExtension.Merge(m, src)
}
func (m *EVMVoteExtension) XXX_Size() int {
	return m.Size()
}
func (m *EVMVoteExtension) XXX_DiscardUnknown() {
	xxx_messageInfo_EVMVoteExtension.DiscardUnknown(m)
}

var xxx_messageInfo_EVMVoteExtension proto.InternalMessageInfo

func (m *EVMVoteExtension) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *EVMVoteExtension) GetBlockGasUsed() uint64 {
	if m != nil {
		return m.BlockGasUsed
	}
	return 0
}

func (m *EVMVoteExtension) GetBloom() []byte {
	if m != nil {
		return m.Bloom
	}
	return nil
}

func (m *EVMVoteExtension) GetMiner() string {
	if m != nil {
		return m.Miner
	}
	return ""
}

func (m *EVMVoteExtension) GetExtraData() []byte {
	if m != nil {
		return m.ExtraData
	}
	return nil
}

func init() {
	proto.RegisterType((*EVMVoteExtension)(nil), "evmos.abci.v1.EVMVoteExtension")
}

func init() {
	proto.RegisterFile("evmos/abci/v1/vote_extensions.proto", fileDescriptor_b230fc52e5675037)
}

var fileDescriptor_b230fc52e5675037 = []byte{
	// 313 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x90, 0xcd, 0x4a, 0xf3, 0x40,
	0x14, 0x86, 0x33, 0x5f, 0x7f, 0x3e, 0x3b, 0x54, 0x91, 0x50, 0x25, 0x88, 0xa6, 0xc1, 0x1f, 0xc8,
	0x2a, 0xa1, 0x08, 0xe2, 0x4e, 0x28, 0x56, 0x71, 0xe1, 0x26, 0x60, 0x17, 0x6e, 0xc2, 0x24, 0x3d,
	0x26, 0xa1, 0x9d, 0x9c, 0xd2, 0x33, 0x0d, 0xf5, 0x2e, 0xbc, 0xac, 0x2e, 0xbb, 0x70, 0x21, 0x2e,
	0x8a, 0xb4, 0x37, 0x22, 0xc9, 0x28, 0x6e, 0x86, 0x79, 0xdf, 0xf3, 0x70, 0x0e, 0x3c, 0xfc, 0x0c,
	0x0a, 0x89, 0xe4, 0x8b, 0x28, 0xce, 0xfc, 0xa2, 0xe7, 0x17, 0xa8, 0x20, 0x84, 0x85, 0x82, 0x9c,
	0x32, 0xcc, 0xc9, 0x9b, 0xce, 0x50, 0xa1, 0xb9, 0x5b, 0x41, 0x5e, 0x09, 0x79, 0x45, 0xef, 0xa8,
	0x93, 0x60, 0x82, 0xd5, 0xc4, 0x2f, 0x7f, 0x1a, 0x3a, 0x7d, 0x67, 0x7c, 0x7f, 0x30, 0x7c, 0x1c,
	0xa2, 0x82, 0xc1, 0xef, 0x02, 0xf3, 0x90, 0x37, 0x53, 0xc8, 0x92, 0x54, 0x59, 0xcc, 0x61, 0x6e,
	0x2d, 0xf8, 0x49, 0xe6, 0x35, 0xdf, 0x89, 0x04, 0x41, 0xf8, 0x02, 0x60, 0xfd, 0x73, 0x98, 0xdb,
	0xea, 0x9f, 0x2c, 0xd7, 0x5d, 0xe3, 0x73, 0xdd, 0x3d, 0x88, 0x91, 0x24, 0x12, 0x8d, 0xc6, 0x5e,
	0x86, 0xbe, 0x14, 0x2a, 0xf5, 0x1e, 0x72, 0x15, 0xfc, 0x2f, 0xf1, 0x3b, 0x00, 0xf3, 0x9c, 0xef,
	0x45, 0x13, 0x8c, 0xc7, 0x61, 0x22, 0x28, 0x9c, 0x13, 0x8c, 0xac, 0x9a, 0xc3, 0xdc, 0x7a, 0xd0,
	0xae, 0xda, 0x7b, 0x41, 0x4f, 0x04, 0x23, 0xb3, 0xc3, 0x1b, 0xd1, 0x04, 0x51, 0x5a, 0x75, 0x87,
	0xb9, 0xed, 0x40, 0x87, 0xb2, 0x95, 0x59, 0x0e, 0x33, 0xab, 0x51, 0x9e, 0x0c, 0x74, 0x30, 0x8f,
	0x79, 0x0b, 0x16, 0x6a, 0x26, 0x6e, 0x85, 0x12, 0x56, 0xb3, 0xe2, 0xff, 0x8a, 0xfe, 0xcd, 0x72,
	0x63, 0xb3, 0xd5, 0xc6, 0x66, 0x5f, 0x1b, 0x9b, 0xbd, 0x6d, 0x6d, 0x63, 0xb5, 0xb5, 0x8d, 0x8f,
	0xad, 0x6d, 0x3c, 0x5f, 0x24, 0x99, 0x4a, 0xe7, 0x91, 0x17, 0xa3, 0xf4, 0xb5, 0x45, 0xfd, 0x16,
	0xbd, 0x2b, 0xed, 0x53, 0xbd, 0x4e, 0x81, 0xa2, 0x66, 0xa5, 0xe7, 0xf2, 0x3b, 0x00, 0x00, 0xff,
	0xff, 0xb8, 0xfb, 0xc9, 0x37, 0x6a, 0x01, 0x00, 0x00,
}

func (m *EVMVoteExtension) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EVMVoteExtension) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EVMVoteExtension) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExtraData) > 0 {
		i -= len(m.ExtraData)
		copy(dAtA[i:], m.ExtraData)
		i = encodeVarintVoteExtensions(dAtA, i, uint64(len(m.ExtraData)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Miner) > 0 {
		i -= len(m.Miner)
		copy(dAtA[i:], m.Miner)
		i = encodeVarintVoteExtensions(dAtA, i, uint64(len(m.Miner)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Bloom) > 0 {
		i -= len(m.Bloom)
		copy(dAtA[i:], m.Bloom)
		i = encodeVarintVoteExtensions(dAtA, i, uint64(len(m.Bloom)))
		i--
		dAtA[i] = 0x22
	}
	if m.BlockGasUsed != 0 {
		i = encodeVarintVoteExtensions(dAtA, i, uint64(m.BlockGasUsed))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.BaseFee.Size()
		i -= size
		if _, err := m.BaseFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVoteExtensions(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Height != 0 {
		i = encodeVarintVoteExtensions(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintVoteExtensions(dAtA []byte, offset int, v uint64) int {
	offset -= sovVoteExtensions(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EVMVoteExtension) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovVoteExtensions(uint64(m.Height))
	}
	l = m.BaseFee.Size()
	n += 1 + l + sovVoteExtensions(uint64(l))
	if m.BlockGasUsed != 0 {
		n += 1 + sovVoteExtensions(uint64(m.BlockGasUsed))
	}
	l = len(m.Bloom)
	if l > 0 {
		n += 1 + l + sovVoteExtensions(uint64(l))
	}
	l = len(m.Miner)
	if l > 0 {
		n += 1 + l + sovVoteExtensions(uint64(l))
	}
	l = len(m.ExtraData)
	if l > 0 {
		n += 1 + l + sovVoteExtensions(uint64(l))
	}
	return n
}

func sovVoteExtensions(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVoteExtensions(x uint64) (n int) {
	return sovVoteExtensions(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EVMVoteExtension) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVoteExtensions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EVMVoteExtension: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EVMVoteExtension: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoteExtensions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoteExtensions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVoteExtensions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVoteExtensions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BaseFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockGasUsed", wireType)
			}
			m.BlockGasUsed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoteExtensions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockGasUsed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bloom", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoteExtensions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVoteExtensions
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVoteExtensions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bloom = append(m.Bloom[:0], dAtA[iNdEx:postIndex]...)
			if m.Bloom == nil {
				m.Bloom = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Miner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoteExtensions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVoteExtensions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVoteExtensions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Miner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoteExtensions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVoteExtensions
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVoteExtensions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtraData = append(m.ExtraData[:0], dAtA[iNdEx:postIndex]...)
			if m.ExtraData == nil {
				m.ExtraData = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVoteExtensions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVoteExtensions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVoteExtensions(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVoteExtensions
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVoteExtensions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVoteExtensions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVoteExtensions
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVoteExtensions
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVoteExtensions
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVoteExtensions        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVoteExtensions          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVoteExtensions = fmt.Errorf("proto: unexpected end of group")
)
