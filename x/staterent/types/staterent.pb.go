// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: evmos/staterent/v1/staterent.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the module parameters
type Params struct {
	AmountOfEntriesNeededToBeFlagged int64                 `protobuf:"varint,1,opt,name=amount_of_entries_needed_to_be_flagged,json=amountOfEntriesNeededToBeFlagged,proto3" json:"amount_of_entries_needed_to_be_flagged,omitempty"`
	CurrentPrice                     cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=current_price,json=currentPrice,proto3,customtype=cosmossdk.io/math.Int" json:"current_price"`
	NextPrice                        cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=next_price,json=nextPrice,proto3,customtype=cosmossdk.io/math.Int" json:"next_price"`
	EntriesToDeletePerBlock          int64                 `protobuf:"varint,4,opt,name=entries_to_delete_per_block,json=entriesToDeletePerBlock,proto3" json:"entries_to_delete_per_block,omitempty"`
	// Blocks counter
	CurrentTic   uint64 `protobuf:"varint,5,opt,name=current_tic,json=currentTic,proto3" json:"current_tic,omitempty"`
	BlocksPerTic uint64 `protobuf:"varint,6,opt,name=blocks_per_tic,json=blocksPerTic,proto3" json:"blocks_per_tic,omitempty"`
	// Using int instead of uint to match the blocks data
	CurrentTicBlock int64 `protobuf:"varint,7,opt,name=current_tic_block,json=currentTicBlock,proto3" json:"current_tic_block,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_5508462b42cf0679, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetAmountOfEntriesNeededToBeFlagged() int64 {
	if m != nil {
		return m.AmountOfEntriesNeededToBeFlagged
	}
	return 0
}

func (m *Params) GetEntriesToDeletePerBlock() int64 {
	if m != nil {
		return m.EntriesToDeletePerBlock
	}
	return 0
}

func (m *Params) GetCurrentTic() uint64 {
	if m != nil {
		return m.CurrentTic
	}
	return 0
}

func (m *Params) GetBlocksPerTic() uint64 {
	if m != nil {
		return m.BlocksPerTic
	}
	return 0
}

func (m *Params) GetCurrentTicBlock() int64 {
	if m != nil {
		return m.CurrentTicBlock
	}
	return 0
}

// FlaggedInfo defines the data needed to clean up the state
type FlaggedInfo struct {
	Contract              string                `protobuf:"bytes,1,opt,name=contract,proto3" json:"contract,omitempty"`
	PaymentDeposit        cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=payment_deposit,json=paymentDeposit,proto3,customtype=cosmossdk.io/math.Int" json:"payment_deposit"`
	IsInactive            bool                  `protobuf:"varint,3,opt,name=is_inactive,json=isInactive,proto3" json:"is_inactive,omitempty"`
	StartDeletionTic      uint64                `protobuf:"varint,4,opt,name=start_deletion_tic,json=startDeletionTic,proto3" json:"start_deletion_tic,omitempty"`
	CurrentDeletedEntries cosmossdk_io_math.Int `protobuf:"bytes,5,opt,name=current_deleted_entries,json=currentDeletedEntries,proto3,customtype=cosmossdk.io/math.Int" json:"current_deleted_entries"`
}

func (m *FlaggedInfo) Reset()         { *m = FlaggedInfo{} }
func (m *FlaggedInfo) String() string { return proto.CompactTextString(m) }
func (*FlaggedInfo) ProtoMessage()    {}
func (*FlaggedInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5508462b42cf0679, []int{1}
}
func (m *FlaggedInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlaggedInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FlaggedInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FlaggedInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlaggedInfo.Merge(m, src)
}
func (m *FlaggedInfo) XXX_Size() int {
	return m.Size()
}
func (m *FlaggedInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_FlaggedInfo.DiscardUnknown(m)
}

var xxx_messageInfo_FlaggedInfo proto.InternalMessageInfo

func (m *FlaggedInfo) GetContract() string {
	if m != nil {
		return m.Contract
	}
	return ""
}

func (m *FlaggedInfo) GetIsInactive() bool {
	if m != nil {
		return m.IsInactive
	}
	return false
}

func (m *FlaggedInfo) GetStartDeletionTic() uint64 {
	if m != nil {
		return m.StartDeletionTic
	}
	return 0
}

func init() {
	proto.RegisterType((*Params)(nil), "evmos.staterent.v1.Params")
	proto.RegisterType((*FlaggedInfo)(nil), "evmos.staterent.v1.FlaggedInfo")
}

func init() {
	proto.RegisterFile("evmos/staterent/v1/staterent.proto", fileDescriptor_5508462b42cf0679)
}

var fileDescriptor_5508462b42cf0679 = []byte{
	// 499 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xc1, 0x6b, 0x1a, 0x4f,
	0x18, 0x75, 0xa3, 0x3f, 0x7f, 0x71, 0x92, 0x26, 0xed, 0xd0, 0x10, 0x6b, 0xe9, 0x2a, 0x52, 0x8a,
	0x94, 0xe0, 0x22, 0x3d, 0x15, 0x7a, 0x12, 0x2b, 0x78, 0x69, 0x45, 0xec, 0xa5, 0x97, 0x61, 0xdd,
	0xfd, 0x34, 0x43, 0xdc, 0xfd, 0x96, 0x99, 0xcf, 0x25, 0xf9, 0x23, 0x0a, 0xbd, 0xf5, 0x5f, 0xca,
	0x31, 0xc7, 0xd2, 0x43, 0x28, 0xfa, 0x8f, 0x94, 0x9d, 0x99, 0xad, 0xb9, 0x35, 0x17, 0x71, 0xde,
	0xbc, 0xf7, 0xe6, 0x7b, 0x6f, 0x67, 0x58, 0x17, 0xf2, 0x04, 0x75, 0xa0, 0x29, 0x24, 0x50, 0x90,
	0x52, 0x90, 0x0f, 0xf6, 0x8b, 0x7e, 0xa6, 0x90, 0x90, 0x73, 0xc3, 0xe9, 0xef, 0xe1, 0x7c, 0xd0,
	0x7a, 0x11, 0xa1, 0x4e, 0x50, 0x0b, 0xc3, 0x08, 0xec, 0xc2, 0xd2, 0x5b, 0xcf, 0x57, 0xb8, 0x42,
	0x8b, 0x17, 0xff, 0x2c, 0xda, 0xfd, 0x56, 0x65, 0xf5, 0x69, 0xa8, 0xc2, 0x44, 0xf3, 0x29, 0x7b,
	0x13, 0x26, 0xb8, 0x49, 0x49, 0xe0, 0x52, 0x40, 0x4a, 0x4a, 0x82, 0x16, 0x29, 0x40, 0x0c, 0xb1,
	0x20, 0x14, 0x0b, 0x10, 0xcb, 0x75, 0xb8, 0x5a, 0x41, 0xdc, 0xf4, 0x3a, 0x5e, 0xaf, 0x3a, 0xeb,
	0x58, 0xf6, 0xe7, 0xe5, 0x47, 0xcb, 0xfd, 0x64, 0xa8, 0x73, 0x1c, 0xc2, 0xd8, 0xf2, 0xf8, 0x90,
	0x3d, 0x89, 0x36, 0xaa, 0x98, 0x4d, 0x64, 0x4a, 0x46, 0xd0, 0x3c, 0xe8, 0x78, 0xbd, 0xc6, 0xf0,
	0xd5, 0xed, 0x7d, 0xbb, 0xf2, 0xeb, 0xbe, 0x7d, 0x66, 0xe7, 0xd3, 0xf1, 0x55, 0x5f, 0x62, 0x90,
	0x84, 0x74, 0xd9, 0x9f, 0xa4, 0x34, 0x3b, 0x76, 0x9a, 0x69, 0x21, 0xe1, 0x1f, 0x18, 0x4b, 0xe1,
	0xba, 0x34, 0xa8, 0x3e, 0xc6, 0xa0, 0x51, 0x08, 0x4a, 0xf5, 0xcb, 0x32, 0x09, 0xa1, 0x88, 0x61,
	0x0d, 0x04, 0x22, 0x03, 0x25, 0x16, 0x6b, 0x8c, 0xae, 0x9a, 0x35, 0x13, 0xe4, 0xdc, 0x51, 0xe6,
	0x38, 0x32, 0x84, 0x29, 0xa8, 0x61, 0xb1, 0xcd, 0xdb, 0xec, 0xa8, 0x9c, 0x9f, 0x64, 0xd4, 0xfc,
	0xaf, 0xe3, 0xf5, 0x6a, 0x33, 0xe6, 0xa0, 0xb9, 0x8c, 0xf8, 0x6b, 0x76, 0x62, 0x8c, 0xb4, 0xf1,
	0x2c, 0x38, 0x75, 0xc3, 0x39, 0xb6, 0xe8, 0x14, 0x54, 0xc1, 0x7a, 0xcb, 0x9e, 0x3d, 0xb0, 0x71,
	0x47, 0xff, 0x6f, 0x8e, 0x3e, 0xdd, 0x9b, 0x99, 0x23, 0xbb, 0x3f, 0x0e, 0xd8, 0x91, 0xab, 0x6f,
	0x92, 0x2e, 0x91, 0xb7, 0xd8, 0x61, 0x84, 0x29, 0xa9, 0x30, 0x22, 0x53, 0x7b, 0x63, 0xf6, 0x77,
	0xcd, 0xc7, 0xec, 0x34, 0x0b, 0x6f, 0x92, 0xc2, 0x37, 0x86, 0x0c, 0xb5, 0xa4, 0xc7, 0x15, 0x7c,
	0xe2, 0x54, 0x23, 0x2b, 0x2a, 0x62, 0x4a, 0x2d, 0x64, 0x1a, 0x46, 0x24, 0x73, 0xdb, 0xf1, 0xe1,
	0x8c, 0x49, 0x3d, 0x71, 0x08, 0xbf, 0x60, 0x5c, 0x53, 0xa8, 0xc8, 0x16, 0x28, 0x31, 0x35, 0x51,
	0x6b, 0x26, 0xea, 0x53, 0xb3, 0x33, 0x72, 0x1b, 0x45, 0xdc, 0x2f, 0xec, 0xbc, 0x8c, 0x6b, 0x0b,
	0x8f, 0xcb, 0xdb, 0x64, 0x1a, 0xfc, 0xe7, 0x78, 0x67, 0x4e, 0x6d, 0x3f, 0x46, 0xec, 0x6e, 0xd7,
	0x70, 0x7c, 0xbb, 0xf5, 0xbd, 0xbb, 0xad, 0xef, 0xfd, 0xde, 0xfa, 0xde, 0xf7, 0x9d, 0x5f, 0xb9,
	0xdb, 0xf9, 0x95, 0x9f, 0x3b, 0xbf, 0xf2, 0xf5, 0x62, 0x25, 0xe9, 0x72, 0xb3, 0xe8, 0x47, 0x98,
	0x04, 0xf6, 0xdd, 0xd8, 0xdf, 0x7c, 0xf0, 0x3e, 0xb8, 0x7e, 0xf0, 0x86, 0xe8, 0x26, 0x03, 0xbd,
	0xa8, 0x9b, 0x8b, 0xff, 0xee, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf7, 0x13, 0x97, 0x62, 0x63,
	0x03, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CurrentTicBlock != 0 {
		i = encodeVarintStaterent(dAtA, i, uint64(m.CurrentTicBlock))
		i--
		dAtA[i] = 0x38
	}
	if m.BlocksPerTic != 0 {
		i = encodeVarintStaterent(dAtA, i, uint64(m.BlocksPerTic))
		i--
		dAtA[i] = 0x30
	}
	if m.CurrentTic != 0 {
		i = encodeVarintStaterent(dAtA, i, uint64(m.CurrentTic))
		i--
		dAtA[i] = 0x28
	}
	if m.EntriesToDeletePerBlock != 0 {
		i = encodeVarintStaterent(dAtA, i, uint64(m.EntriesToDeletePerBlock))
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.NextPrice.Size()
		i -= size
		if _, err := m.NextPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStaterent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.CurrentPrice.Size()
		i -= size
		if _, err := m.CurrentPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStaterent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.AmountOfEntriesNeededToBeFlagged != 0 {
		i = encodeVarintStaterent(dAtA, i, uint64(m.AmountOfEntriesNeededToBeFlagged))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FlaggedInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlaggedInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlaggedInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.CurrentDeletedEntries.Size()
		i -= size
		if _, err := m.CurrentDeletedEntries.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStaterent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.StartDeletionTic != 0 {
		i = encodeVarintStaterent(dAtA, i, uint64(m.StartDeletionTic))
		i--
		dAtA[i] = 0x20
	}
	if m.IsInactive {
		i--
		if m.IsInactive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.PaymentDeposit.Size()
		i -= size
		if _, err := m.PaymentDeposit.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStaterent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintStaterent(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintStaterent(dAtA []byte, offset int, v uint64) int {
	offset -= sovStaterent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AmountOfEntriesNeededToBeFlagged != 0 {
		n += 1 + sovStaterent(uint64(m.AmountOfEntriesNeededToBeFlagged))
	}
	l = m.CurrentPrice.Size()
	n += 1 + l + sovStaterent(uint64(l))
	l = m.NextPrice.Size()
	n += 1 + l + sovStaterent(uint64(l))
	if m.EntriesToDeletePerBlock != 0 {
		n += 1 + sovStaterent(uint64(m.EntriesToDeletePerBlock))
	}
	if m.CurrentTic != 0 {
		n += 1 + sovStaterent(uint64(m.CurrentTic))
	}
	if m.BlocksPerTic != 0 {
		n += 1 + sovStaterent(uint64(m.BlocksPerTic))
	}
	if m.CurrentTicBlock != 0 {
		n += 1 + sovStaterent(uint64(m.CurrentTicBlock))
	}
	return n
}

func (m *FlaggedInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovStaterent(uint64(l))
	}
	l = m.PaymentDeposit.Size()
	n += 1 + l + sovStaterent(uint64(l))
	if m.IsInactive {
		n += 2
	}
	if m.StartDeletionTic != 0 {
		n += 1 + sovStaterent(uint64(m.StartDeletionTic))
	}
	l = m.CurrentDeletedEntries.Size()
	n += 1 + l + sovStaterent(uint64(l))
	return n
}

func sovStaterent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStaterent(x uint64) (n int) {
	return sovStaterent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStaterent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountOfEntriesNeededToBeFlagged", wireType)
			}
			m.AmountOfEntriesNeededToBeFlagged = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaterent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AmountOfEntriesNeededToBeFlagged |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaterent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaterent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaterent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CurrentPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaterent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaterent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaterent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NextPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntriesToDeletePerBlock", wireType)
			}
			m.EntriesToDeletePerBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaterent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EntriesToDeletePerBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentTic", wireType)
			}
			m.CurrentTic = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaterent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentTic |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlocksPerTic", wireType)
			}
			m.BlocksPerTic = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaterent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlocksPerTic |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentTicBlock", wireType)
			}
			m.CurrentTicBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaterent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentTicBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStaterent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStaterent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlaggedInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStaterent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlaggedInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlaggedInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaterent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaterent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaterent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentDeposit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaterent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaterent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaterent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PaymentDeposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsInactive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaterent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsInactive = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartDeletionTic", wireType)
			}
			m.StartDeletionTic = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaterent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartDeletionTic |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentDeletedEntries", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaterent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaterent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaterent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CurrentDeletedEntries.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStaterent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStaterent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStaterent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStaterent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStaterent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStaterent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStaterent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStaterent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStaterent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStaterent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStaterent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStaterent = fmt.Errorf("proto: unexpected end of group")
)
