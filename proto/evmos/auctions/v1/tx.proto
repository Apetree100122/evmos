// Copyright Tharsis Labs Ltd.(Evmos)
// SPDX-License-Identifier:ENCL-1.0(https://github.com/evmos/evmos/blob/main/LICENSE)
syntax = "proto3";
package evmos.auctions.v1;

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "evmos/auctions/v1/genesis.proto";
import "google/api/annotations.proto";

option go_package = "github.com/evmos/evmos/v18/x/auctions/types";


// Msg defines the auctions Msg service.
service Msg {

  // Bid defines a method for placing a bid for an auction
  rpc Bid(MsgBid) returns (MsgBidResponse){
    option (google.api.http).get = "/evmos/auctions/v1/bid";
  }

  // DepositCoins defines a method for depositing coins to an auction
  rpc DepositCoin(MsgDepositCoin) returns (MsgDepositCoinResponse){
    option (google.api.http).get = "/evmos/auctions/v1/deposit_coin";
  }

  // UpdateParams defines a method for updating the auction parameters
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse) {
    option (google.api.http).get = "/evmos/auctions/v1/update_params";
  }
}

message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  // authority is the address of the governance account.
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // params defines the x/auctions parameters to update.
  // NOTE: All parameters must be supplied.
  Params params = 2 [(gogoproto.nullable) = false];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}


// Bid is a message for placing a bid on an auction
message MsgBid {
  option (cosmos.msg.v1.signer) = "sender";
  string sender = 1;

  // amount of tokens in EVMOS to bid
  cosmos.base.v1beta1.Coin amount = 2 [ (gogoproto.nullable) = false ];
}


message MsgBidResponse {}


// DepositCoins is a message for depositing coins to an auction
message MsgDepositCoin {
  // sender is the address of the account that is depositing coins
  option (cosmos.msg.v1.signer) = "sender";
  string sender = 1;

  // amount to deposit into the auction
  cosmos.base.v1beta1.Coin amount = 2 [ (gogoproto.nullable) = false ];
}

message MsgDepositCoinResponse {}


